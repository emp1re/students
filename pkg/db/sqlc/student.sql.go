// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: student.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
   first_name, last_name, age, email, gender, favourite_color, addresses, created_at, updated_at, deleted)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, first_name, last_name, age, email, gender, favourite_color, addresses, created_at, updated_at, deleted
`

type CreateStudentParams struct {
	FirstName      string             `json:"first_name"`
	LastName       string             `json:"last_name"`
	Age            pgtype.Int8        `json:"age"`
	Email          string             `json:"email"`
	Gender         pgtype.Text        `json:"gender"`
	FavouriteColor pgtype.Text        `json:"favourite_color"`
	Addresses      pgtype.Text        `json:"addresses"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	Deleted        pgtype.Bool        `json:"deleted"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent,
		arg.FirstName,
		arg.LastName,
		arg.Age,
		arg.Email,
		arg.Gender,
		arg.FavouriteColor,
		arg.Addresses,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Deleted,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Email,
		&i.Gender,
		&i.FavouriteColor,
		&i.Addresses,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
UPDATE students
SET deleted = true
WHERE id = $1 AND deleted = false
`

func (q *Queries) DeleteStudent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteStudent, id)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT id, first_name, last_name, age, email, gender, favourite_color, addresses, created_at, updated_at, deleted FROM students
WHERE id = $1 AND deleted = false
`

func (q *Queries) GetStudent(ctx context.Context, id int32) (Student, error) {
	row := q.db.QueryRow(ctx, getStudent, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Email,
		&i.Gender,
		&i.FavouriteColor,
		&i.Addresses,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, first_name, last_name, age, email, gender, favourite_color, addresses, created_at, updated_at, deleted FROM students
ORDER BY id AND deleted = false
LIMIT $1
OFFSET $2
`

type ListStudentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStudents(ctx context.Context, arg ListStudentsParams) ([]Student, error) {
	rows, err := q.db.Query(ctx, listStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Age,
			&i.Email,
			&i.Gender,
			&i.FavouriteColor,
			&i.Addresses,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :exec
UPDATE students
SET first_name = $2, last_name = $3, age = $4
WHERE id = $1 AND deleted = false
`

type UpdateStudentParams struct {
	ID        int32       `json:"id"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Age       pgtype.Int8 `json:"age"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) error {
	_, err := q.db.Exec(ctx, updateStudent,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Age,
	)
	return err
}
