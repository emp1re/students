// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package generated

import (
	sqlc "github.com/emp1re/students/pkg/db/sqlc"
	models "github.com/emp1re/students/pkg/models"
)

type ConverterImpl struct{}

func (c *ConverterImpl) ConvertAddress(source sqlc.Address) models.OutAddress {
	var modelsOutAddress models.OutAddress
	modelsOutAddress.AddressID = source.AddressID
	modelsOutAddress.Street = models.PgTypeToText(source.Street)
	modelsOutAddress.City = models.PgTypeToText(source.City)
	modelsOutAddress.Planet = models.PgTypeToText(source.Planet)
	modelsOutAddress.Phone = source.Phone
	return modelsOutAddress
}
func (c *ConverterImpl) ConvertAddressesItems(source []sqlc.Address) []models.OutAddress {
	var modelsOutAddressList []models.OutAddress
	if source != nil {
		modelsOutAddressList = make([]models.OutAddress, len(source))
		for i := 0; i < len(source); i++ {
			modelsOutAddressList[i] = c.ConvertAddress(source[i])
		}
	}
	return modelsOutAddressList
}
func (c *ConverterImpl) ConvertFromDBStudent(source sqlc.Student) models.OutFromDbStudent {
	var modelsOutFromDbStudent models.OutFromDbStudent
	modelsOutFromDbStudent.ID = source.ID
	modelsOutFromDbStudent.StudentID = source.StudentID
	modelsOutFromDbStudent.FirstName = source.FirstName
	modelsOutFromDbStudent.LastName = source.LastName
	modelsOutFromDbStudent.Age = models.PgTypeToInt4(source.Age)
	modelsOutFromDbStudent.Email = source.Email
	modelsOutFromDbStudent.Gender = models.PgTypeToText(source.Gender)
	modelsOutFromDbStudent.FavouriteColor = models.PgTypeToText(source.FavouriteColor)
	modelsOutFromDbStudent.StudentAddress = source.StudentAddress
	modelsOutFromDbStudent.CreatedAt = source.CreatedAt
	modelsOutFromDbStudent.UpdatedAt = source.UpdatedAt
	modelsOutFromDbStudent.Deleted = models.PgTypeToBool(source.Deleted)
	return modelsOutFromDbStudent
}
func (c *ConverterImpl) ConvertFromDbStudents(source []sqlc.Student) []models.OutFromDbStudent {
	var modelsOutFromDbStudentList []models.OutFromDbStudent
	if source != nil {
		modelsOutFromDbStudentList = make([]models.OutFromDbStudent, len(source))
		for i := 0; i < len(source); i++ {
			modelsOutFromDbStudentList[i] = c.ConvertFromDBStudent(source[i])
		}
	}
	return modelsOutFromDbStudentList
}
